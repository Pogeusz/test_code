import requests
from bs4 import BeautifulSoup
from prettytable import PrettyTable

# Function to color text in terminal
def color_text(text, color):
    color_codes = {
        'red': '\033[91m',
        'green': '\033[92m',
        'endc': '\033[0m',
    }
    return f"{color_codes[color]}{text}{color_codes['endc']}"

def scrape_table(url, api_names):
    # Step 1: Request the webpage content
    response = requests.get(url)
    response.raise_for_status()  # Ensure we got a successful response

    # Step 2: Parse the HTML content
    soup = BeautifulSoup(response.text, 'html.parser')

    # Step 3: Find the table in the HTML
    table = soup.find('table')  # Assuming the first table is the target

    if not table:
        raise ValueError("No table found on the webpage")

    # Step 4: Extract headers to identify the correct columns
    headers = [header.text.strip() for header in table.find_all('th')]
    
    # Ensure the table has the required columns
    if 'API' not in headers or 'Allowed Dev' not in headers or 'Allowed Prod' not in headers:
        raise ValueError("Required columns not found in the table")
    
    # Find the indexes of the required columns
    api_index = headers.index('API')
    dev_index = headers.index('Allowed Dev')
    prod_index = headers.index('Allowed Prod')
    
    # Step 5: Prepare the table output
    pt = PrettyTable()
    pt.field_names = ["API", "Dev", "Prod"]
    
    # Step 6: Iterate through the rows and extract the key-value pairs only for specified APIs
    for row in table.find_all('tr')[1:]:  # Skip the header row
        columns = row.find_all('td')
        if len(columns) > max(api_index, dev_index, prod_index):
            api_key = columns[api_index].text.strip()
            if api_key in api_names:  # Only process if the API name is in the provided list
                allowed_dev = columns[dev_index].text.strip()
                allowed_prod = columns[prod_index].text.strip()
                
                # Color the values based on their Boolean status
                colored_dev = color_text(allowed_dev, 'green' if allowed_dev == 'True' else 'red')
                colored_prod = color_text(allowed_prod, 'green' if allowed_prod == 'True' else 'red')
                
                pt.add_row([api_key, colored_dev, colored_prod])
    
    # Return the formatted table
    return pt

# Example usage
url = "YOUR_URL_HERE"
api_names = ["API_NAME_1", "API_NAME_2"]  # Replace with the actual API names you want to check
result_table = scrape_table(url, api_names)

# Print the formatted table
print(result_table)